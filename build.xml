<?xml version="1.0"?>

<!-- This is the main build file for the carddav classes and server.

     Authors: Mike Douglass   douglm  rpi edu
-->

<project name="carddav" default="deploy">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <property environment="env"/>
  <!-- These may already be set from calling dir -->
  <dirname property="org.bedework.project.carddav" file="${ant.file}"/>
  <dirname property="project.home" file="${ant.file}"/>

  <property file="${project.home}/build.properties" />

  <property name="project.name" value="${org.bedework.package.name}"/>
  <property name="project.version" value="${org.bedework.version}"/>

  <property name="dist.home" location="${project.home}/dist"/>
  <property name="lib.dir" location="${project.home}/lib"/>

  <property name="build.dir" location="${project.home}/build"/>
  <property name="buildjar" location="${build.dir}/buildTools/buildjar.xml"/>
  <property name="buildwar" location="${build.dir}/buildwar.xml"/>

  <property name="org.bedework.libcache.dir"
            location="${project.home}/libcache"/>

  <import file="${build.dir}/buildTools/getJar.xml"/>
  <import file="${build.dir}/loadDeployConfig.xml"/>

  <!-- =================================================================
       init:
       ================================================================= -->

  <target name="init">
    <property name="org.bedework.project.bedework"
  	          location="${project.home}/../bedework" />

  	<loadDeployConfig />

    <echo message="*** Options file: ${org.bedework.carddav.options}" />

    <delete dir="${lib.dir}" />
    <mkdir dir="${lib.dir}" />

    <property name="org.bedework.getjar.property.prefix"
              value="org.bedework.appjar" />

    <getJar name="commons-codec" version="1.3" />
    <getJar name="commons-httpclient" version="3.0" />
    <getJar name="gdata-calendar" version="1.0" />
    <getJar name="gdata-client" version="1.0" />
    <getJar name="ical4j" version="1.0-rc3-SNAPSHOT" />
    <getJar name="ical4j-vcard" version="0.9.2" />
    <getJar name="log4j" version="1.2.8" />
    <getJar name="servletapi" version="2.4" />

    <getJar name="rpiaccess" version="3.6" project="access"
            projecthome="${project.home}/../bedework/projects/access" />

    <getJar name="rpiutil" version="3.6" project="rpiutil"
            projecthome="${project.home}/../bedework/projects/rpiutil" />

    <getJar name="bw-webdavserver" version="3.6" project="webdav"
            projecthome="${project.home}/../bedework/projects/webdav" />

    <property name="org.bedework.carddav.server.base"
              location="${project.home}/server" />

    <mkdir dir="${dist.home}" />

    <property name="test.data.dir"
              location="${dist.home}/test-data" />

    <property name="edu.rpi.cmt.empty.dir"
              location="${dist.home}/empty-dir" />
    <mkdir dir="${edu.rpi.cmt.empty.dir}" />

    <fileset id="empty.fileset" dir="${edu.rpi.cmt.empty.dir}"
             excludes="*" />

    <!-- default to empty -->
    <fileset id="buildjar.resource.files" refid="empty.fileset" />
    <fileset id="buildjar.generated.java.sources" refid="empty.fileset" />

    <property name="server.jar"
              location="${dist.home}/${edu.rpi.cmt.carddav.server.jar}-${project.version}.jar" />

    <!-- ==================== Compilation Classpath ==================== -->

    <path id="compile.classpath">
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${dist.home}">
         <include name="*.jar"/>
      </fileset>
    </path>
  </target>

  <!-- =================================================================
       Clean out all library files from other projects and all generated
       files in preparation for a complete rebuild.

       Needed because switching versions leaves a load of old bedework
       generated stuff in the libraries.
       ================================================================= -->
  <target name="deep-clean" depends="clean">
    <delete dir="${lib.dir}" />
  </target>

  <!-- =================================================================
       Clean all generated files
       ================================================================= -->
  <target name="clean">
    <delete dir="${dist.home}" />
  </target>

  <!-- =================================================================
       Clean up after a build.
       ================================================================= -->
  <target name="cleanup">
    <delete dir="${edu.rpi.cmt.empty.dir}" />
  </target>

  <!-- ========================== Base build Targets ===================
       Here we have one target building the classes and interfaces that make
       up the access control suite.
       ================================================================= -->

  <target name="clean-build" depends="clean,build"
          description="Clean and compile carddav classes"/>

  <target name="clean-build-all" depends="clean,build-all"
          description="Clean and compile carddav classes"/>

  <target name="build" depends="init,build-source,cleanup"
          description="Compile carddav classes"/>

  <!-- ===================== build.all Target ===============================
     This target builds jar files ready for the deploy target.
     =================================================================== -->

  <target name="build-all" depends="init,build-source,cleanup"
          description="Compile carddav classes"/>

  <target name="build-source" depends="bld.auth.server,bld.unauth.server" />

  <!-- ===================== deploy Target ===============================
     Deploy if an application server is defined.
     =================================================================== -->

  <target name="deploy" depends="build-all"
  	      description="Deploy carddav">
    <if>
      <isset property="org.bedework.appserver.deploy.dir"/>
      <then>
        <delete dir="${org.bedework.appserver.deploy.dir}/${org.bedework.app.usercarddav.war.name}" />
        <delete dir="${org.bedework.appserver.deploy.dir}/${org.bedework.app.pubcarddav.war.name}" />

        <copy todir="${org.bedework.appserver.deploy.dir}">
          <fileset dir="${dist.home}">
        	  <include name="*.war" />
         </fileset>
        </copy>
      </then>
      <else>
        <echo message="********* No deploy directory defined" />
      </else>
    </if>
  </target>

<!-- ==================== Javadoc Target ===============================
     The "javadoc" target creates Javadoc API documentation for the Java
     classes included in your application.  Normally, this is only required
     when preparing a distribution release, but is available as a separate
     target in case the developer wants to create Javadocs independently.
     =================================================================== -->

  <target name="javadoc" depends="init"
          description="Create Javadoc API documentation">
    <property name="destdir" location="${dist.home}/docs/api"/>
    <mkdir dir="${destdir}"/>

    <javadoc sourcepath="${org.bedework.caldav.server.base}/src:"
           classpathref="compile.classpath"
                destdir="${destdir}"
           packagenames="org.bedework.*,
                         edu.rpi.*"
                 access="public"
                 author="true"
                version="true"
          breakiterator="yes"
            windowtitle="${project.name} ${project.version} API Documentation">
      <doctitle><![CDATA[${project.name} ${project.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${project.name} ${project.version}<br/>API Documentation]]></header>
      <link href="../../access/api" />
      <link href="../../calendarapi/api" />
      <link href="../../davutil/api" />
      <link href="../../rpiutil/api" />
      <link href="../../webdav/api" />
      <link href="${env.JAVA_HOME}/docs/api" />
    </javadoc>
  </target>

  <!-- ===================== internal build targets ====================
       ================================================================= -->

  <target name="bld.auth.server">
    <ant antfile="${org.bedework.carddav.server.base}/build.xml" inheritrefs="true"
         target="build" />

    <!-- ===============================================================
         Build the authenticated war
         =============================================================== -->

    <property name="app.sou.dir"
              location="${org.bedework.carddav.server.base}" />
    <property name="org.bedework.temp.wars.home"
              location="${dist.home}/wars" />
    <property name="org.bedework.temp.extrajars.dir"
              location="${dist.home}/extrajars" />

    <ant antfile="${buildwar}" inheritRefs="true" target="build" >
      <property name="propval.app.context.root"
                value="${org.bedework.app.usercarddav.war.name}" />
      <property name="propval.app.war.name"
                value="${org.bedework.app.usercarddav.war.name}" />
      <property name="propval.app.web.xml"
                location="${app.sou.dir}/war/WEB-INF/userweb.xml" />

      <property name="org.bedework.deploy.name"
                value="usercarddav" />
    </ant>
  </target>

  <target name="bld.unauth.server">
    <ant antfile="${org.bedework.carddav.server.base}/build.xml" inheritrefs="true"
         target="build" />

    <!-- ===============================================================
         Build the unauthenticated war
         =============================================================== -->

    <property name="app.sou.dir"
              location="${org.bedework.carddav.server.base}" />
    <property name="org.bedework.temp.wars.home"
              location="${dist.home}/wars" />
    <property name="org.bedework.temp.extrajars.dir"
              location="${dist.home}/extrajars" />

    <ant antfile="${buildwar}" inheritRefs="true" target="build" >
      <property name="propval.app.context.root"
                value="${org.bedework.app.pubcarddav.war.name}" />
      <property name="propval.app.war.name"
                value="${org.bedework.app.pubcarddav.war.name}" />
      <property name="propval.app.web.xml"
                location="${app.sou.dir}/war/WEB-INF/publicweb.xml" />

      <property name="org.bedework.deploy.name"
                value="pubcarddav" />
    </ant>
  </target>
</project>
